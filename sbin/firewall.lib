#!/bin/bash

########################################################################
# Load parameters

if [ -f /etc/firewall/firewall.cf ] ; then
	source /etc/firewall/firewall.cf
else
	echo "ABORTED: '/etc/firewall/firewall.cf' not found !"
	exit 1
fi

########################################################################
# Checks

# Are we root ?
if [ ${UID} -ne 0 ]; then
	echo "ABORTED: you must be root to use the firewall !"
	exit 1
fi

# Are the iptables softwares present on the system ?
if [ ! -x ${V4_IPTABLES} -o ! -x ${V4_LOADER} -o ! -x ${V4_SAVER} ]; then 
	echo "ABORTED: iptables binaries are not present !"
	exit 1
fi

# Are the ip6tables softwares present on the system ?
if [ ! -x ${V6_IPTABLES} -o ! -x ${V6_LOADER} -o ! -x ${V6_SAVER} ]; then 
	echo "ABORTED: ip6tables binaries are not present !"
	exit 1
fi

########################################################################
# Functions (firewall management)

# Append the data from the save file to the running firewall
function start_V4_firewall {

	echo -n "Starting local IPv4 firewall : "

	if [ "${V4_DISABLE}" = "1" ] ; then
		echo "disabled"
		return
	fi

	if [ -f ${V4_SAVE_FILE} ]; then

		[ -f ${V4_PRE_START} ] && source ${V4_PRE_START}

		$V4_LOADER < ${V4_SAVE_FILE}

		[ -f ${V4_POST_START} ] && source ${V4_POST_START}

		echo "done"

	else

		rval=1
		echo "not done !"

	fi

}

# Clear the running firewall
function stop_V4_firewall {

	local ch

	[ -f ${V4_PRE_STOP} ] && source ${V4_PRE_STOP}

	echo -n "Stopping local IPv4 firewall : "

	# We set the built-in chain policy to ACCEPT
	for ch in INPUT OUTPUT FORWARD; do
		$V4_IPTABLES -P ${ch} ACCEPT
	done

	# We flush all the chains
	for ch in $($V4_IPTABLES -L | grep "^Chain" | sed -e "s/Chain\ //; s/\ (.*)$//") ; do
		$V4_IPTABLES -F ${ch}
	done

	# We delete all the user-defined chains
	$V4_IPTABLES -X

	[ -f ${V4_POST_STOP} ] && source ${V4_POST_STOP}

	echo "done"

}

# Save the running firewall
function save_V4_firewall {

	if [ ! -f ${APPLY_LOG} ] ; then
		echo "ABORTED: please apply your rules first !"
		echo
		exit 1
	fi

	grep -q "^# ERROR: ${V4_IPTABLES} " ${APPLY_LOG}
	if [ $? -eq 0 ] ; then
		echo "ABORTED: please check your rules !"
		echo
		grep -B2 "^# ERROR: ${V4_IPTABLES} " ${APPLY_LOG} |grep -v "^$"
		echo
		exit 1
	fi

	[ -f ${V4_PRE_SAVE} ] && source ${V4_PRE_SAVE}

	$V4_SAVER > ${V4_SAVE_FILE}
	chmod o-rwx ${V4_SAVE_FILE}
	echo "IPv4 firewall saved to ${V4_SAVE_FILE}"

	[ -f ${V4_POST_SAVE} ] && source ${V4_POST_SAVE}

}

# Append the data from the save file to the running firewall
function start_V6_firewall {

	echo -n "Starting local IPv6 firewall : "

	if [ "${V6_DISABLE}" = "1" ] ; then
		echo "disabled"
		return
	fi

	if [ -f ${V6_SAVE_FILE} ]; then

		[ -f ${V6_PRE_START} ] && source ${V6_PRE_START}

		$V6_LOADER < ${V6_SAVE_FILE}

		[ -f ${V6_POST_START} ] && source ${V6_POST_START}

		echo "done"

	else

		rval=1
		echo "not done !"
	fi

}

# Clear the running firewall
function stop_V6_firewall {

	local ch

	[ -f ${V6_PRE_STOP} ] && source ${V6_PRE_STOP}

	echo -n "Stopping local IPv6 firewall : "

	# We set the built-in chain policy to ACCEPT
	for ch in INPUT OUTPUT FORWARD; do
		$V6_IPTABLES -P ${ch} ACCEPT
	done

	# We flush all the chains
	for ch in $($V6_IPTABLES -L | grep "^Chain" | sed -e "s/Chain\ //; s/\ (.*)$//") ; do
		$V6_IPTABLES -F ${ch}
	done

	# We delete all the user-defined chains
	$V6_IPTABLES -X

	[ -f ${V6_POST_STOP} ] && source ${V6_POST_STOP}

	echo "done"

} 

# Save the running firewave.
function save_V6_firewall {

	if [ ! -f ${APPLY_LOG} ] ; then
		echo "ABORTED: please apply your rules first !"
		echo
		exit 1
	fi

	grep -q "^# ERROR: ${V6_IPTABLES} " ${APPLY_LOG}
	if [ $? -eq 0 ] ; then
		echo "ABORTED: please check your rules"
		echo
		grep -B2 "^# ERROR: ${V6_IPTABLES} " ${APPLY_LOG} |grep -v "^$"
		echo
		exit 1
	fi

	[ -f ${V6_PRE_SAVE} ] && source ${V6_PRE_SAVE}

	$V6_SAVER > ${V6_SAVE_FILE}
	chmod o-rwx ${V6_SAVE_FILE}
	echo "IPv6 firewall saved to ${V6_SAVE_FILE}"

	[ -f ${V6_POST_SAVE} ] && source ${V6_POST_SAVE}

}

# Start V4 and V6 firewall
function start_firewall {

	[ -f ${PRE_START} ] && source ${PRE_START}

	start_V4_firewall
	start_V6_firewall

	[ -f ${POST_START} ] && source ${POST_START}

}

# Stop V4 and V6 firewall
function stop_firewall {

	[ -f ${PRE_STOP} ] && source ${PRE_STOP}

	stop_V4_firewall
	stop_V6_firewall

	[ -f ${POST_STOP} ] && source ${POST_STOP}

}

# Save V4 and V6 firewall
function save_firewall {

	if [ ! -f ${APPLY_LOG} ] ; then
		echo "ABORTED: please apply your rules first !"
		echo
		exit 1
	fi

	grep -q "^# ERROR: " ${APPLY_LOG}
	if [ $? -eq 0 ] ; then
		echo "ABORTED: please check your rules !"
		echo
		grep -B2 "^# ERROR: " ${APPLY_LOG} |grep -v "^$"
		echo
		exit 1
	fi

	[ -f ${PRE_SAVE} ] && source ${PRE_SAVE}

	save_V4_firewall
	save_V6_firewall

	[ -f ${POST_SAVE} ] && source ${POST_SAVE}

}

# Update V4 and V6 firewall
function update_firewall {

compile_rules
if [ $? -ne 0 ] ; then
	rval=1
	return
fi

apply_rules
if [ $? -ne 0 ] ; then
	rval=1
	return
fi

save_firewall
if [ $? -ne 0 ] ; then
	rval=1
	return
fi

}

########################################################################
# Functions (rules management)

# Target type (IPv4, IPv6 or name/FQDN) ?
function target_type {

	# IPv4 ?
	echo ${1} |tr -d '0-9' |grep -q '^\.\.\.'
	if [ $? -eq 0 ] ; then
		echo "ipv4"
		return 0
	fi
	
	# IPv6 ?
	echo ${1} |tr -d '0-9a-f' |grep -q '^::'
	if [ $? -eq 0 ] ; then
		echo "ipv6"
		return 0
	fi
	
	# Not IPv4 or IPv6 -> name or FQDN
	echo "name"
	return 0

}

# Does the name/FQDN has an IPv4 ?
function name_has_ipv4 {

	getent ahostsv4 ${1} 2>/dev/null >/dev/null
	return $?

}

# Does the name/FQDN has an IPv6 ?
function name_has_ipv6 {

	getent ahostsv6 ${1} |egrep -v "^::ffff:" 2>/dev/null >/dev/null
	return $?

}

# Does the name/FQDN has an IPv4, IPv6 or both ?
function name_ip_type {

	local v4
	local v6
	
	name_has_ipv4 ${1} && v4=1 || v4=0
	name_has_ipv6 ${1} && v6=1 || v6=0
	
	case ${v4}${v6} in
		10) echo "ipv4" ;;
		01) echo "ipv6" ;;
		11) echo "both" ;;
		00) echo "noip" ;;
	esac
	
}

# Does the rule match IPv4, IPv6, both or has an error (mix IPv4/Ipv6) ?
function check_proto {
	
	local t S D f
	
	# Protocol is explicit ?
	case "${1}" in
		ipt4)
			f=ipv4
		;;
		ipt6)
			f=ipv6
		;;
	esac
	
	while [[ $# -gt 0 ]] ; do
	
		case "${1}" in
		
			-s)
				shift
				t=$(target_type "${1}")
				case ${t} in 
					ipv4) S=ipv4 ;;
					ipv6) S=ipv6 ;;
					name) S=$(name_ip_type ${1}) ;;
				esac
			;;
		
			-d)
				shift
				t=$(target_type "${1}")
				case ${t} in 
					ipv4) D=ipv4 ;;
					ipv6) D=ipv6 ;;
					name) D=$(name_ip_type ${1}) ;;
				esac
			;;
		
		esac
		
		shift
	
	done

	S=${S:-none}
	D=${D:-none}

	# Protocol is explicit, ensure source/destination have same type
	case ${f} in
		ipv4)
			if [ "${S}" = "ipv6" ] || [ "${D}" = "ipv6" ] ; then
				echo "noip"
			else
				echo "ipv4"
			fi
			return
		;;
		ipv6)
			if [ "${S}" = "ipv4" ] || [ "${D}" = "ipv4" ] ; then
				echo "noip"
			else
				echo "ipv6"
			fi
			return
		;;
	esac

	# Prococol is not explicit, try to get it from source/destination
	case ${S}${D} in
	
		ipv4ipv4) echo "ipv4" ;;
		ipv4both) echo "ipv4" ;;
		bothipv4) echo "ipv4" ;;
		
		ipv4none) echo "ipv4" ;;
		noneipv4) echo "ipv4" ;;
		
		ipv6ipv6) echo "ipv6" ;;
		ipv6both) echo "ipv6" ;;
		bothipv6) echo "ipv6" ;;
		
		ipv6none) echo "ipv6" ;;
		noneipv6) echo "ipv6" ;;
		
		bothboth) echo "both" ;;
		nonenone) echo "both" ;;
		
		noneboth) echo "both" ;;
		bothnone) echo "both" ;;
	
		*) echo "noip";;

	esac
	
}

function parse_rule {
	
	local p rule
	
	p=$(check_proto "${@}")

	shift
	
	if [ "${p}" = "ipv4" ] || [ "${p}" = "both" ] ; then
		if [ "${V4_DISABLE}" = "1" ] ; then
			echo "# (IPv4 disabled) ${V4_IPTABLES} ${@}"
		else
			echo "${V4_IPTABLES} ${@}"
		fi
	fi
	
	if [ "${p}" = "ipv6" ] || [ "${p}" = "both" ] ; then
		if [ "${V6_DISABLE}" = "1" ] ; then
			echo "# (IPv6 disabled) ${V6_IPTABLES} ${@}"
		else
			echo "${V6_IPTABLES} ${@}"
		fi
	fi

	if [ "${p}" = "noip" ] ; then
		echo "# ERROR: please check source or destination"
	fi

	echo
	
}

function compile_rules {

	local L C e

	[ -f ${RULES_SCRIPT} ] && rm ${RULES_SCRIPT}

	for rules in ${RULES} ; do
		if [ -f ${rules} ] ; then
			egrep -v '^#|^$' ${rules} |while read L ; do
				echo "# ${L}"
				C=$(parse_rule ${L})
				echo "${C}"
				echo
			done
		fi
	done |tee ${RULES_SCRIPT}

	e=$(grep -c "^# ERROR: " ${RULES_SCRIPT})
	echo -e "# ERRORS: ${e}\n"
	[ ${e} -eq 0 ] || rval=1

}

function apply_rules {

	local R r e

	# Ensure the rules are compiled
	if [ ! -f ${RULES_SCRIPT} ] ; then
		echo "ABORTED: please compile your rules first !"
		echo
		exit 1
	fi

	# Ensure that rules has no compilation error
	grep -q "# ERROR: " ${RULES_SCRIPT}
	if [ $? -eq 0 ] ; then
		echo "ABORTED: please check your rules first !"
		echo
		grep -B2 "^# ERROR: " ${RULES_SCRIPT} |grep -v "^$"
		echo
		exit 1
	fi

	stop_firewall

	cat ${RULES_SCRIPT} |while read R ; do
		e=0
		r=(${R})
		case "${r}" in
			${V4_IPTABLES}|${V6_IPTABLES})
				${R} 2>/dev/null
				[ $? -ne 0 ] && e=1
			;;
		esac
		if [ ${e} -eq 0 ] ; then
			echo "${R}"
		else
			echo "# ERROR: ${R}"
		fi
	done |tee ${APPLY_LOG}

	e=$(grep -c "^# ERROR: " ${APPLY_LOG})
	echo -e "# ERRORS: ${e}\n"
	[ ${e} -eq 0 ] || rval=1

}
